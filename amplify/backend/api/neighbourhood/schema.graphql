# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
input AMPLIFY {
  globalAuthRule: AuthRule = { allow: public }
} # FOR TESTING ONLY!
enum FriendRequestStatus {
  PENDING
  ACCEPTED
  DECLINED
}

enum PostType {
  THOUGHT
  EVENT_ANNOUNCEMENT
  ITEM_FOR_SALE
}

enum Visibility {
  PUBLIC
  FRIENDS_ONLY
  FRIENDS_OF_FRIENDS
  PRIVATE
}

type FriendRequest @model {
  id: ID!
  sender: User! @belongsTo
  receiver: User! @belongsTo
  status: FriendRequestStatus!
}

type User @model {
  id: ID!
  username: String!
  email: String!
  postalCode: String!
  firstName: String!
  lastName: String!
  communities: [Community!]! @manyToMany(relationName: "UserCommunity")
  selectedCommunity: String! #Store selected community's id
  posts: [Post!]! @hasMany
  friends: [User] @hasMany
  friendRequests: [FriendRequest!]! @hasMany
  events: [Event!]! @hasMany
  itemsForSale: [ItemForSale!]! @hasMany
  likedPosts: [Post!]! @manyToMany(relationName: "UserLikedPosts")
  likedEvents: [Event!]! @manyToMany(relationName: "UserLikedEvents")
  likedItems: [ItemForSale!]! @manyToMany(relationName: "UserLikedItems")
  location: String
  age: Int
  bio: String
  profilePic: String
  pets: Int
  kids: Int
  comments: [Comment] @hasMany
}

type Community @model {
  id: ID!
  name: String!
  location: String!
  coordinates: String!
  image: String
  members: [User!]! @manyToMany(relationName: "UserCommunity")
  posts: [Post!]! @hasMany
  events: [Event] @hasMany
  itemsForSale: [ItemForSale] @hasMany
}

type Post @model {
  id: ID!
  author: User! @belongsTo
  community: Community! @belongsTo
  images: [String]
  content: String!
  postType: PostType!
  likedBy: [User!]! @manyToMany(relationName: "UserLikedPosts")
  comments: [Comment!]! @hasMany
  visibility: Visibility!
}

type Comment @model {
  id: ID!
  post: Post! @belongsTo
  author: User! @belongsTo
  content: String!
}

type Event @model {
  id: ID!
  name: String!
  description: String!
  images: [String]
  location: String!
  datetime: AWSDateTime!
  community: Community! @belongsTo
  organizer: User! @belongsTo
  # attendees: [User!]! @hasMany
  likedBy: [User!]! @manyToMany(relationName: "UserLikedEvents")
  visibility: Visibility!
}

type ItemForSale @model {
  id: ID!
  title: String!
  description: String!
  images: [String]
  contact: String!
  price: Float!
  seller: User! @belongsTo
  community: Community! @belongsTo
  likedBy: [User!]! @manyToMany(relationName: "UserLikedItems")
  visibility: Visibility!
}

type Query {
  searchPosts(communityId: ID!, keyword: String!): [Post!]!
  searchPeople(communityId: ID!, keyword: String!): [User!]!
  getCommunityPosts(communityId: ID!): [Post!]!
  getCommunityEvents(communityId: ID!): [Event!]!
  getUserFriends(userId: ID!): [User!]!
  pendingFriendRequests(userId: ID!): [FriendRequest!]!
  sentFriendRequests(userId: ID!): [FriendRequest!]!
}

type Mutation {
  switchCommunity(userId: ID!, communityId: ID!): User
  joinCommunity(userId: ID!, communityId: ID!): User
  likePost(postId: ID!): Post
  unlikePost(postId: ID!): Post
  commentOnPost(postId: ID!, authorId: ID!, content: String!): Comment
  sellItem(
    title: String!
    description: String!
    price: Float!
    sellerId: ID!
    communityId: ID!
    images: [String]
    contact: String!
    visibility: Visibility!
  ): ItemForSale
  addFriend(userId: ID!, friendId: ID!): User
  likeEvent(userId: ID!, eventId: ID!): Event
  unlikeEvent(userId: ID!, eventId: ID!): Event
  likeItemForSale(userId: ID!, itemId: ID!): ItemForSale
  unlikeItemForSale(userId: ID!, itemId: ID!): ItemForSale
  sendFriendRequest(senderId: ID!, receiverId: ID!): FriendRequest
  acceptFriendRequest(requestId: ID!): FriendRequest
  declineFriendRequest(requestId: ID!): FriendRequest
}
