# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
input AMPLIFY { globalAuthRule: AuthRule = { allow: public } } # FOR TESTING ONLY!

// Notes: 
// One shared table for all types of posts, with a type field (marketplace, event, etc.)
// OR different tables for marketplace, event, post

//friends
//friends field in user, check members field of community for overlap with friends list?

//keep track of eligible communities?

//trim down events + items for sale to play nicely with posts table

type User {
  id: ID!
  username: String!
  email: String!
  password: String!
  postalCode: String!
  communities: [Community!]! @hasMany
  selectedCommunity: Community @belongsTo
  posts: [Post!]! @hasMany
  friends: [User!]! @hasMany
  friendRequests: [FriendRequest!]! @hasMany
  events: [Event!]! @hasMany
  itemsForSale: [ItemForSale!]! @hasMany
  likedPosts: [Post!]! @hasMany
  likedEvents: [Event!]! @hasMany
  likedItems: [ItemForSale!]! @hasMany
  location: String
  age: Int
  bio: String
  profilePic: String
  pets: Int
  kids: Int
}

type FriendRequest {
  id: ID!
  sender: User! @belongsTo
  receiver: User! @belongsTo
  status: FriendRequestStatus!
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  DECLINED
}

type Community {
  id: ID!
  name: String!
  location: String!
  postalCode: String!
  members: [User!]! @hasMany
  posts: [Post!]! @hasMany
}

type Post {
  id: ID!
  author: User! @belongsTo
  community: Community! @belongsTo
  images: [String]
  content: String!
  postType: PostType!
  likedBy: [User!]! @hasMany
  comments: [Comment!]! @hasMany
  visibility: Visibility!
}

enum PostType {
  THOUGHT
  EVENT_ANNOUNCEMENT
  ITEM_FOR_SALE
}

enum Visibility {
  PUBLIC
  FRIENDS_ONLY
  FRIENDS_OF_FRIENDS
  PRIVATE
}

type Comment {
  id: ID!
  post: Post! @belongsTo
  author: User! @belongsTo
  content: String!
}

type Event {
  id: ID!
  name: String!
  description: String!
  images: [String]
  location: String!
  datetime: AWSDateTime!
  community: Community! @belongsTo
  organizer: User! @belongsTo
  attendees: [User!]! @hasMany
  likedBy: [User!]! @hasMany
  visibility: Visibility!
}

type ItemForSale {
  id: ID!
  title: String!
  description: String!
  images: [String]
  contact: String!
  price: Float!
  seller: User! @belongsTo
  community: Community! @belongsTo
  likedBy: [User!]! @hasMany
  visibility: Visibility!
}

type Query {
  loginUser(username: String!, password: String!): User
  searchPosts(communityId: ID!, keyword: String!): [Post!]!
  searchPeople(communityId: ID!, keyword: String!): [User!]!
  getCommunityPosts(communityId: ID!): [Post!]!
  getUserFriends(userId: ID!): [User!]!
  pendingFriendRequests(userId: ID!): [FriendRequest!]!
  sentFriendRequests(userId: ID!): [FriendRequest!]!
}

type Mutation {
  createUser(username: String!, email: String!, password: String!, postalCode: String!): User
  updateUser(id: ID!, username: String, email: String, password: String, postalCode: String, age: Int, bio: String, profilePic: String, pets: Int, kids: Int): User
  switchCommunity(userId: ID!, communityId: ID!): User
  joinCommunity(userId: ID!, communityId: ID!): User
  createPost(authorId: ID!, communityId: ID!, content: String!, postType: PostType!, visibility: Visibility!, images: [String]): Post
  likePost(postId: ID!): Post
  unlikePost(postId: ID!): Post
  commentOnPost(postId: ID!, authorId: ID!, content: String!): Comment
  createEvent(name: String!, description: String!, datetime: AWSDateTime!, communityId: ID!, organizerId: ID!, images: [String], visibility: Visibility!): Event
  sellItem(title: String!, description: String!, price: Float!, sellerId: ID!, communityId: ID!, images: [String], contact: String!, visibility: Visibility!): ItemForSale
  addFriend(userId: ID!, friendId: ID!): User
  likeEvent(userId: ID!, eventId: ID!): Event
  unlikeEvent(userId: ID!, eventId: ID!): Event
  likeItemForSale(userId: ID!, itemId: ID!): ItemForSale
  unlikeItemForSale(userId: ID!, itemId: ID!): ItemForSale
  sendFriendRequest(senderId: ID!, receiverId: ID!): FriendRequest
  acceptFriendRequest(requestId: ID!): FriendRequest
  declineFriendRequest(requestId: ID!): FriendRequest
}